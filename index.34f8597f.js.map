{"mappings":"AAkBA,MAGMA,EAAcC,GACX,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAHmBC,KAAKC,KAAqB,IAAhBD,KAAKE,UAIxCC,YAAW,KACLJ,EAAQ,KACVF,EAAQ,C,MACNE,E,UACAJ,IAGFG,EAAO,C,MACLC,E,UACAJ,EACAS,MAAO,iBACP,GAEHL,EAAM,IAIPM,EAvBa,CAAC,QAAS,MAAO,WAuBRC,KAAIC,GACvBb,EAAYa,KAyCrBX,QAAQY,WAAWH,GAAUI,MAAKC,IAChCC,QAAQC,IAAIF,GACZA,EAAKG,SAAQN,IACO,cAAdA,EAAGO,OACLH,QAAQC,IAAI,KAAGL,EAAIQ,MAAGpB,0BAA8BY,EAAEQ,MAAGhB,YAEvDY,QAAMC,IACN,KAAGL,EAAES,OAAGZ,UAAeG,EAAES,OAAGrB,yBAA8BY,EAAES,OAAGjB,WAAgB,GAGnF","sources":["src/js/hard-promice.js"],"sourcesContent":["/*\n * Methods:\n * Promise.race(array) - повертає перший успішно виконаний або відхилений проміс, зі значенням чи причиною відхилення цього промісу.\n *\n * Promise.all(array) - повертає проміс, який виконається тоді, коли будуть успішно виконані всі проміси, або відхилено будь-який з них.\n *\n * Promise.allSettled(array) - повертає проміс, який виконується коли всі отримані проміси завершені (успішно виконані або відхилені), міститиме масив результатів отриманих промісів (status і value для успішних, status та reason для неуспішних)\n *\n * Promise.any(array) - як тільки один із промісів виконається успішно, метод поверне значення виконаного промісу. Якщо жоден із промісів не завершиться успішно, тоді повернутий Promise буде відхилено\n */\n\n/*\n * Зробіть 3 проміси - по одному для кожного фреймворку з масиву.\n * У кожному розташована функція setTimeout із випадковою затримкою від 0 до 2 секунд.\n * Зробити так, щоб проміси і резолвилися, і реджектилися випадково.\n * Нехай кожен проміс своїм результатом повертає цю затримку та ім'я фреймворку, а при помилці ще й текст помилки 'Promise error'.\n */\n\nconst frameworks = ['React', 'Vue', 'Angular'];\n\nconst getRandomDelay = () => Math.ceil(Math.random() * 2000);\nconst makePromise = framework => {\n  return new Promise((resolve, reject) => {\n    const delay = getRandomDelay();\n    setTimeout(() => {\n      if (delay < 1500) {\n        resolve({\n          delay,\n          framework,\n        });\n      } else {\n        reject({\n          delay,\n          framework,\n          error: 'Promise error',\n        });\n      }\n    }, delay);\n  });\n};\n\nconst promises = frameworks.map(el => {\n  return makePromise(el);\n});\n// console.log(promises);\n\n/*\n * За допомогою Promise.race дочекайтеся завантаження першого промісу, що спрацював, і виведіть результат його роботи на екран: `✅ ${Framework_name} won with ${delay} ms`\n * або результат помилки: `❌ ${error}! ${name} rejected in ${delay} ms`\n */\n// Promise.race(promises)\n//   .then(({ framework, delay }) => {\n//     console.log(`✅ ${framework} won with ${delay} ms`);\n//   })\n//   .catch(({ framework, delay, error }) => {\n//     console.log(`❌ ${error}! ${framework} rejected in ${delay} ms`);\n//   });\n/*\n * За допомогою Promise.all отримайте масив результатів\n * Виведіть на екран інформацію, з якою затримкою виконався проміс для кожного фреймфорка: `✅ ${Framework_name} fulfilled in ${delay} ms`\n * Або з якою затримкою зареджектився один із них: `❌ ${error}! ${Framework_name} rejected in ${delay} ms`\n */\n/* Promise.all(promises)\n  .then(data => {\n    data.forEach(({ framework, delay }) => {\n      console.log(`✅ ${framework} fulfilled in ${delay} ms`);\n    });\n  })\n  .catch(({ framework, delay, error }) => {\n    console.log(`❌ ${error}! ${framework} rejected in ${delay} ms`);\n  }); */\n/*\n * За допомогою Promise.allSettled отримайте масив результатів.\n * Виведіть на екран інформацію, з яким результатом виконався проміс для кожного фреймфорка:\n * `✅ ${Framework_name} fulfilled in ${delay} ms`\n * `❌ ${error}! ${Framework_name} rejected in ${delay} ms`\n *\n\n\n * Приклад відповіді:\n * {status: \"fulfilled\", value: 99},\n * {status: \"rejected\", reason: Error: an error}\n */\nPromise.allSettled(promises).then(data => {\n  console.log(data);\n  data.forEach(el => {\n    if (el.status === `fulfilled`) {\n      console.log(`✅ ${el.value.framework} fulfilled in ${el.value.delay} ms`);\n    } else {\n      console.log(\n        `❌ ${el.reason.error}! ${el.reason.framework} rejected in ${el.reason.delay} ms`\n      );\n    }\n  });\n});\n"],"names":["$2e667c22d5fee8c0$var$makePromise","framework","Promise","resolve","reject","delay","Math","ceil","random","setTimeout","error","$2e667c22d5fee8c0$var$promises","map","el","allSettled","then","data","console","log","forEach","status","value","reason"],"version":3,"file":"index.34f8597f.js.map"}